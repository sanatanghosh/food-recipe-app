{"version":3,"sources":["components/recipe.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Recipe","title","calories","image","ingredients","className","map","ingredient","text","src","alt","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","a","fetch","response","json","data","console","log","hits","onSubmit","e","preventDefault","type","value","onChange","target","item","key","recipe","label","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"ySAsBeA,G,MAhBA,SAAC,GAA8C,IAA7CC,EAA4C,EAA5CA,MAAQC,EAAoC,EAApCA,SAAWC,EAAyB,EAAzBA,MAAQC,EAAiB,EAAjBA,YACxC,OACI,yBAAKC,UAAU,UACX,wBAAIA,UAAU,SAASJ,GACvB,4BACI,4BAAI,2CACHG,EAAYE,KAAK,SAAAC,GAAU,OACxB,4BAAKA,EAAWC,UAGxB,uBAAGH,UAAU,YAAb,cAAoCH,GACpC,yBAAKG,UAAU,SAASI,IAAKN,EAAOO,IAAI,QC4DrCC,G,MAtEH,WAIV,IAJgB,EAQcC,mBAAS,IARvB,mBAQTC,EARS,KAQAC,EARA,OASYF,mBAAS,IATrB,mBASTG,EATS,KASDC,EATC,OAUUJ,mBAAS,UAVnB,mBAUTK,EAVS,KAUFC,EAVE,KAchBC,qBAAW,WACTC,MACC,CAACH,IAKJ,IAAMG,EAAU,uCAAG,8BAAAC,EAAA,sEAEMC,MAAM,mCAAD,OAAoCL,EAApC,mBAnBf,WAmBe,oBAlBd,qCAgBG,cAEXM,EAFW,gBAGEA,EAASC,OAHX,OAGXC,EAHW,OAKjBC,QAAQC,IAAIF,EAAKG,MACjBd,EAAWW,EAAKG,MANC,2CAAH,qDAuBhB,OACE,yBAAKvB,UAAU,OACX,yBAAKA,UAAU,UACb,0DAEJ,0BAAMA,UAAU,cAAcwB,SAZhB,SAAAC,GAChBA,EAAEC,iBACFb,EAASH,GACTC,EAAU,MAUN,2BAAOX,UAAU,aAAa2B,KAAK,OAAOC,MAAOlB,EAAQmB,SAlB1C,SAAAJ,GACnBd,EAAUc,EAAEK,OAAOF,OACnBP,QAAQC,IAAIZ,MAiBR,4BAAQV,UAAU,iBAChB,uCAGJ,yBAAKA,UAAU,WACZQ,EAAQP,KAAI,SAAA8B,GAAI,OACf,kBAAC,EAAD,CACEC,IAAKD,EAAKE,OAAOC,MACjBtC,MAAOmC,EAAKE,OAAOC,MACnBrC,SAAUkC,EAAKE,OAAOpC,SACtBC,MAAOiC,EAAKE,OAAOnC,MACnBC,YAAagC,EAAKE,OAAOlC,qBCzDjBoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMC,c","file":"static/js/main.66f461d7.chunk.js","sourcesContent":["import React from 'react';\n\n\nimport './recipe.style.css'\n\n\nconst Recipe = ({title , calories , image , ingredients}) => {\n    return (\n        <div className='recipe' >\n            <h2 className='title'>{title}</h2>\n            <ul>\n                <h3><i>INGREDIENTS</i></h3>\n                {ingredients.map( ingredient => (\n                    <li>{ingredient.text}</li>\n                ))}\n            </ul>\n            <p className='calories'>Calories : {calories}</p>\n            <img className='images' src={image} alt='' />  \n        </div>\n    );\n};\n\nexport default Recipe;","import React, { useEffect, useState } from 'react';\n\nimport Recipe from './components/recipe.component';\n\nimport './App.css';\n\n\nconst App = () => {\n\n\n\n  const API_ID = '9cb3bd71';\n  const API_KEY = 'f5c0a977437018245c474c0d10b3a773';\n\n  //declaring state\n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState('');\n  const [query, setQuery] = useState('burger')\n\n\n\n  useEffect( () => {\n    getRecipes() \n  }, [query]);\n\n\n\n\n  const getRecipes = async () => {\n\n    const response = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${API_ID}&app_key=${API_KEY}`);\n    const data = await response.json();\n\n    console.log(data.hits);\n    setRecipes(data.hits)\n\n  }\n\n\n  const updateSearch = e => {\n    setSearch(e.target.value);\n    console.log(search);\n  };\n\n  const getSearch = e => {\n    e.preventDefault();\n    setQuery(search);\n    setSearch('');\n  }\n\n\n  return (\n    <div className=\"App\">\n        <div className='header'>\n          <h2>RECIPE SEARCH APPLICATION</h2>\n        </div>\n      <form className='search-form' onSubmit={getSearch} >\n        <input className='search-bar' type='text' value={search} onChange={updateSearch} />\n        <button className='search-button'>\n          <b>SEARCH</b>\n        </button>\n      </form>\n      <div className='recipes'>\n        {recipes.map(item => (\n          <Recipe\n            key={item.recipe.label}\n            title={item.recipe.label}\n            calories={item.recipe.calories}\n            image={item.recipe.image}\n            ingredients={item.recipe.ingredients}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}